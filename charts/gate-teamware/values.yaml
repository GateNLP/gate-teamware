# Default values for gate-teamware.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Host name under which the app will be exposed by the ingress
hostName: "example.gate.ac.uk"
publicUrl: ""

superuser:
  # Email address for the default superuser account.  This account is created
  # by the migration job only in the case where there are no superuser accounts
  # already in the database
  email: teamware-admin@example.com
  # Username for the default superuser
  username: admin
  # Initial password for the default superuser, ignored if existingSecret is set
  password: "admin"
  # Name of an existing secret containing the initial superuser password as the
  # "password" key.
  existingSecret: ""

# Docker registry prefix from which the backend and staticFiles images will be
# pulled - if specified, this value _must_ end with a forward slash, e.g.
# imageRegistry: "ghcr.io/gatenlp/"
imageRegistry: ""

migrations:
  # Whether to run a job at chart install time to perform the Django migrations -
  # this needs to be set to true on the first install, but could be changed to
  # false for subsequent ones if there are no DB changes.  We deliberately do not
  # run migrations as part of the regular Django startup as this is dangerous
  # when there may be more than one replica of the backend pod.
  run: false
  ttl: 300

  waitFor:
    registry: "ghcr.io/patrickdappollonio/"
    image: "wait-for"
    tag: "latest"
    timeout: "30s"

backend:
  image:
    repository: teamware-backend
    pullPolicy: IfNotPresent
    pullSecrets: []
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  replicaCount: 1
  djangoSecret: ""
  service:
    type: ClusterIP
    port: 80
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000


staticFiles:
  image:
    repository: teamware-static
    pullPolicy: IfNotPresent
    pullSecrets: []
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  replicaCount: 1
  service:
    type: ClusterIP
    port: 80
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  healthPort: 8888

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""


ingress:
  className: ""
  annotations: {}
    # kubernetes.io/tls-acme: "true"
  tls:
    enabled: true
    secret: ""

email:
  # Admin email address, used as the "from" address on automated emails
  adminAddress: ""
  # "smtp" for SMTP(S) sender, "gmail" for GMail API
  backend: ""
  # Should we require activation of new accounts with an emailed token, to
  # verify the email address?
  activationEnabled: false
  smtp:
    host: ""
    port: "587"
    # username, if SMTP server requires authentication
    user: ""
    # kubernetes secret containing the SMTP password as the "password" key
    passwordSecret: ""
    # SMTP security, if required - "TLS" for STARTTLS (typically on port 25 or
    # 587), "SSL" for TLS-on-connect (typically port 465)
    security: ""
    # Name of a TLS secret containing the client key and certificate, if
    # required
    clientCertSecret: ""
  gmail:
    # OAuth client ID for the GMail API
    clientId: ""
    # Name of a Kubernetes secret with keys "client-secret" for the OAuth
    # client secret and "refresh-token" for the GMail API refresh token.
    secretName: ""

# Database settings
postgresql:
  architecture: standalone
  auth:
    database: annotations_db
    username: gate
    existingSecret: postgres-credentials

  # Additional useful settings include persistence.storageClass and persistence.size

# Configure regular database backups to S3 (or compatible) storage
backup:
  image: "schickling/postgres-backup-s3:latest"
  pullPolicy: Always
  # API endpoint, if not the public Amazon S3
  endpoint: ""
  # S3 region e.g. us-east-1
  region: ""
  # Bucket to which the backups should be stored
  bucketName: ""
  # common key prefix for all the backups
  keyPrefix: ""
  # Kubernetes secret with keys "access-key-id" and "secret-key" that have
  # write access to the specified bucket
  credentialsSecret: ""

  concurrencyPolicy: ""
  failedJobsHistoryLimit: ""
  successfulJobsHistoryLimit: ""

  # Backup schedule.  Keys in the map are the name of the backup schedule
  # (e.g. daily, weekly), values are the cron expression defining the schedule.
  # The actual backup files will be placed at
  # s3://<bucketName>/<keyPrefix>/<schedule-name>/<database-name>_<timestamp>.sql.gz
  #
  # Note that the cron job creates new backups but does not expire old ones -
  # if you want old backups to expire (or be moved to cheaper storage like
  # infrequent access or Glacier) then you should configure that at the bucket
  # level using S3 lifecycle rules.
  schedule: {}
  # daily:   "13 01 * * *"
  # weekly:  "13 02 * * 0"
  # monthly: "13 00 1 * *"
