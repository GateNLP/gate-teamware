(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{416:function(e,a,t){"use strict";t.r(a);var s=t(53),n=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"developer-guide"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#developer-guide"}},[e._v("#")]),e._v(" Developer guide")]),e._v(" "),t("h2",{attrs:{id:"architecture"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#architecture"}},[e._v("#")]),e._v(" Architecture")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("├── .github/workflows/    # github actions workflow files\n├── teamware/             # Django project\n│   └── settings/\n├── backend/              # Django app\n├── charts/               # Helm charts for Kubernetes\n├── cypress/              # integration test configurations\n├── docs/                 # documentation\n├── examples/             # example data files\n├── frontend/             # all frontend, in VueJS framework\n├── nginx/                # Nginx configurations\n|\n# Top level directory contains scripts for management and deployment,\n# main project package.json, python requirements, docker configs\n├── build-images.sh\n├── deploy.sh\n├── create-django-db.sh\n├── docker-compose.yml\n├── Dockerfile\n├── generate-docker-env.sh\n├── manage.py\n├── migrate-integration.sh\n├── package.json\n├── package-lock.json\n├── pytest.ini\n├── README.md\n├── requirements-dev.txt\n├── requirements.txt\n└── run-server.sh\n\n")])])]),t("h2",{attrs:{id:"installation-for-development"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#installation-for-development"}},[e._v("#")]),e._v(" Installation for development")]),e._v(" "),t("p",[e._v("The service depends on a combination of python and javascript libraries. We recommend developing inside a "),t("code",[e._v("conda")]),e._v(" conda environment as it is able to install\npython libraries and nodejs which is used to install javascript libraries.")]),e._v(" "),t("ul",[t("li",[e._v("Install anaconda/miniconda")]),e._v(" "),t("li",[e._v("Create a blank virtual conda env"),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ conda create -n teamware "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("python")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.9")]),e._v("\n")])])])]),e._v(" "),t("li",[e._v("Activate conda environment"),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("source")]),e._v(" activate teamware\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# or")]),e._v("\n$ conda activate teamware\n")])])])]),e._v(" "),t("li",[e._v("Install python dependencies in conda environment using pip"),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("teamware"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("$ pip "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -r requirements.txt -r requirements-dev.txt\n")])])])]),e._v(" "),t("li",[e._v("Install nodejs, postgresql and openssl in the conda environment"),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("teamware"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("$ conda "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y -c conda-forge "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("postgresql")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("14")]),e._v(".*\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("teamware"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("$ conda "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y -c conda-forge "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("nodejs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("14")]),e._v(".*\n")])])])]),e._v(" "),t("li",[e._v("Install nodejs dependencies"),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("teamware"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n")])])])])]),e._v(" "),t("p",[e._v("Set up a new postgreSQL database and user for development:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('# Create a new directory for the db data and initialise\nmkdir -p pgsql/data\ninitdb -D pgsql/data\n\n# Launch postgres in the background\npostgres -p 5432 -D pgsql/data &\n\n# Create a DB user, you\'ll be prompted to input password, "password" is the default in teamware/settings/base.py for development\ncreateuser -p 5432 -P user --createdb\n\n# Create a rumours_db with rumours as user\ncreatedb -p 5432 -O user teamware_db\n\n# Migrate & create database tables\npython manage.py migrate\n\n# create a new superuser - when prompted enter a username and password for the db superuser\npython manage.py createsuperuser\n')])])]),t("h2",{attrs:{id:"updating-packages"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#updating-packages"}},[e._v("#")]),e._v(" Updating packages")]),e._v(" "),t("p",[e._v("To update packages after a merge, run the following commands:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Activate the conda environment")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("source")]),e._v(" activate teamware\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Update any packages changed in the python requirements.txt and requirements-dev.txt files")]),e._v("\npip "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -r requirements.txt -r requirements-dev.txt\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Update any packages changed in package.json")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n")])])]),t("h2",{attrs:{id:"development-server"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#development-server"}},[e._v("#")]),e._v(" Development server")]),e._v(" "),t("p",[e._v("The application uses django's dev server to serve page contents and run the RPC API, it also uses Vue CLI's\ndevelopment server to serve dynamic assets such as javascript or stylesheets allowing for hot-reloading\nduring development.")]),e._v(" "),t("p",[e._v("To run both servers together:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" run serve\n")])])]),t("p",[e._v("To run separately:")]),e._v(" "),t("ul",[t("li",[e._v("Django server"),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" run serve:backend\n")])])])]),e._v(" "),t("li",[e._v("Vue CLI dev server"),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" run serve:frontend\n")])])])])]),e._v(" "),t("h2",{attrs:{id:"deployment-using-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#deployment-using-docker"}},[e._v("#")]),e._v(" Deployment using Docker")]),e._v(" "),t("p",[e._v("Deployment is via "),t("a",{attrs:{href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker-compose"),t("OutboundLink")],1),e._v(", using "),t("a",{attrs:{href:"https://www.nginx.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("NGINX"),t("OutboundLink")],1),e._v(" to serve static content, a separate "),t("a",{attrs:{href:"https://hub.docker.com/_/postgres",target:"_blank",rel:"noopener noreferrer"}},[e._v("postgreSQL"),t("OutboundLink")],1),e._v(" service containing the database and a database backup service (see "),t("code",[e._v("docker-compose.yml")]),e._v(" for details).")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("Run "),t("code",[e._v("./generate-docker-env.sh")]),e._v(" to create a "),t("code",[e._v(".env")]),e._v(" file containing randomly generated secrets which are mounted as environment variables into the container. See "),t("a",{attrs:{href:"#env-config"}},[e._v("below")]),e._v(" for details.")])]),e._v(" "),t("li",[t("p",[e._v("Then build the images via:")])])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("./build-images.sh\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("then deploy the stack with")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("./deploy.sh production "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# (or prod) to deploy with production settings")]),e._v("\n./deploy.sh staging "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# (or stag) to deploy with staging settings")]),e._v("\n")])])]),t("p",[e._v("To bring the stack down, run "),t("code",[e._v("docker-compose down")]),e._v(", using the "),t("code",[e._v("-v")]),e._v(" flag to destroy the database volume (be careful with this).")]),e._v(" "),t("h3",{attrs:{id:"configuration-using-environment-variables-env-file"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration-using-environment-variables-env-file"}},[e._v("#")]),e._v(" Configuration using environment variables (.env file)"),t("a",{attrs:{id:"env-config"}})]),e._v(" "),t("p",[e._v("To allow the app to be easily configured between instances especially inside containers, many of the app's configuration can be done through environment variables.")]),e._v(" "),t("p",[e._v("Run "),t("code",[e._v("./generate-docker-env.sh")]),e._v(" to generate a "),t("code",[e._v(".env")]),e._v(" file with all configurable environment parameters.")]),e._v(" "),t("p",[e._v("To set values for your own deployment, add values to the variables in "),t("code",[e._v(".env")]),e._v(", most existing values will be kept after running "),t("code",[e._v("generate-docker-env.sh")]),e._v(", see comments in "),t("code",[e._v(".env")]),e._v(" for specific details. Anything that is left blank will be filled with a default value. Passwords and keys are filled with auto-generated random values.")]),e._v(" "),t("p",[e._v("Existing "),t("code",[e._v(".env")]),e._v(" files are copied into a new file named "),t("code",[e._v("saved-env.<DATE-TIME>")]),e._v(" by "),t("code",[e._v("generate-docker-env.sh")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"backups"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#backups"}},[e._v("#")]),e._v(" Backups")]),e._v(" "),t("p",[e._v("In a docker-compose based deployment, backups of the database are managed by the service "),t("code",[e._v("pgbackups")]),e._v(" which uses the "),t("a",{attrs:{href:"https://hub.docker.com/r/prodrigestivill/postgres-backup-local",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("prodrigestivill/postgres-backup-local:12")]),t("OutboundLink")],1),e._v(" image.\nBy default, backups are taken of the database daily, and the "),t("code",[e._v("docker-compose.yml")]),e._v(" contains settings for the number of backups kept under the options for the "),t("code",[e._v("pgbackups")]),e._v(" service.\nBackups are stored as a gzipped SQL dump from the database.")]),e._v(" "),t("h4",{attrs:{id:"taking-a-manual-backup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#taking-a-manual-backup"}},[e._v("#")]),e._v(" Taking a manual backup")]),e._v(" "),t("p",[e._v("A shell script is provided for manually triggering a backup snapshot.\nFrom the main project directory run")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("$ ./backup_manual.sh\n")])])]),t("p",[e._v("This uses the "),t("code",[e._v("pgbackups")]),e._v(" service and all settings and envrionment variables it is configured with in "),t("code",[e._v("docker-compose.yml")]),e._v(", so backups will be taken to the same location as configured for the main backup schedule.")]),e._v(" "),t("h4",{attrs:{id:"restoring-from-a-backup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#restoring-from-a-backup"}},[e._v("#")]),e._v(" Restoring from a backup")]),e._v(" "),t("ol",[t("li",[e._v("Locate the backup file ("),t("code",[e._v("*.sql.gz")]),e._v(") on your system that you would like to restore from.")]),e._v(" "),t("li",[e._v("Make sure that the stack is down, from the main project directory run "),t("code",[e._v("docker-commpose down")]),e._v(".")]),e._v(" "),t("li",[e._v("Run the backup restore shell script, passing in the path to your backup file as the only argument:")])]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("$ ./backup_restore.sh path/to/my/backup.sql.gz\n")])])]),t("p",[e._v("This will first launch the database container, then via Django's "),t("code",[e._v("dbshell")]),e._v(" command, running in the "),t("code",[e._v("backend")]),e._v(" service, execute a number of SQL commands before and after running all the SQL from the backup file.")]),e._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[e._v("Redeploy the stack, via "),t("code",[e._v("./deploy.sh staging")]),e._v(" or "),t("code",[e._v("./deploy.sh production")]),e._v(", whichever is the case.")]),e._v(" "),t("li",[e._v("The database "),t("em",[e._v("should")]),e._v(" be restored.")])]),e._v(" "),t("h2",{attrs:{id:"deployment-using-kubernetes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#deployment-using-kubernetes"}},[e._v("#")]),e._v(" Deployment using Kubernetes")]),e._v(" "),t("p",[e._v("Helm charts and instructions for deploying teamware via Kubernetes are available in the "),t("code",[e._v("charts/")]),e._v(" folder.")]),e._v(" "),t("p",[t("em",[e._v("More documentation to follow")])]),e._v(" "),t("h2",{attrs:{id:"configuration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),t("h3",{attrs:{id:"django-settings-files"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#django-settings-files"}},[e._v("#")]),e._v(" Django settings files")]),e._v(" "),t("p",[e._v("Django settings are located in "),t("code",[e._v("teamware/settings")]),e._v(" folder. The app will use "),t("code",[e._v("base.py")]),e._v(" setting by default\nand this must be overridden depending on use.")]),e._v(" "),t("h3",{attrs:{id:"database"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#database"}},[e._v("#")]),e._v(" Database")]),e._v(" "),t("p",[e._v("A SQLite3 database is used during development and during integration testing.")]),e._v(" "),t("p",[e._v("For staging and production, postgreSQL is used, running from a "),t("code",[e._v("postgres-12")]),e._v(" docker container. Settings are found in "),t("code",[e._v("teamware/settings/base.py")]),e._v(" and "),t("code",[e._v("deployment.py")]),e._v(" as well as being set as environment variables by "),t("code",[e._v("./generate-docker-env.sh")]),e._v(" and passed to the container as configured in "),t("code",[e._v("docker-compose.yml")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"sending-e-mail"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sending-e-mail"}},[e._v("#")]),e._v(" Sending E-mail")]),e._v(" "),t("p",[e._v("It's recommended to specify e-mail configurations through environment variables ("),t("code",[e._v(".env")]),e._v("). As these settings will include username and passwords that should not be tracked by version control.")]),e._v(" "),t("h4",{attrs:{id:"e-mail-using-smtp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#e-mail-using-smtp"}},[e._v("#")]),e._v(" E-mail using SMTP")]),e._v(" "),t("p",[e._v("SMTP is supported as standard in Django, add the following configurations with your own details\nto the list of environment variables:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DJANGO_EMAIL_BACKEND")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'django.core.mail.backends.smtp.EmailBackend'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DJANGO_EMAIL_HOST")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'myserver.com'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DJANGO_EMAIL_PORT")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("22")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DJANGO_EMAIL_HOST_USER")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'username'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DJANGO_EMAIL_HOST_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'password'")]),e._v("\n")])])]),t("h4",{attrs:{id:"e-mail-using-google-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#e-mail-using-google-api"}},[e._v("#")]),e._v(" E-mail using Google API")]),e._v(" "),t("p",[e._v("The "),t("a",{attrs:{href:"https://github.com/dolfim/django-gmailapi-backend",target:"_blank",rel:"noopener noreferrer"}},[e._v("django-gmailapi-backend"),t("OutboundLink")],1),e._v(" library\nhas been added to allow sending of mail through Google's API as sending through SMTP is disabled as standard.")]),e._v(" "),t("p",[e._v("Unlike with SMTP, Google's API requires OAuth authentication which means a project and a credential has to be\ncreated through Google's cloud console.")]),e._v(" "),t("ul",[t("li",[e._v("More information on the Gmail API: "),t("a",{attrs:{href:"https://developers.google.com/gmail/api/guides/sending",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://developers.google.com/gmail/api/guides/sending"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("OAuth credentials for sending emails: "),t("a",{attrs:{href:"https://github.com/google/gmail-oauth2-tools/wiki/OAuth2DotPyRunThrough",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/google/gmail-oauth2-tools/wiki/OAuth2DotPyRunThrough"),t("OutboundLink")],1)])]),e._v(" "),t("p",[e._v("This package includes the script linked in the documentation above, which simplifies the setup of the API credentials. The following outlines the key steps:")]),e._v(" "),t("ol",[t("li",[e._v("Create a project in the Google developer console, "),t("a",{attrs:{href:"https://console.cloud.google.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://console.cloud.google.com/"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Enable the Gmail API")]),e._v(" "),t("li",[e._v("Create OAuth 2.0 credentials, you'll likely want to create a "),t("code",[e._v("Desktop")])]),e._v(" "),t("li",[e._v("Create a valid refresh_token using the helper script included in the package:")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("gmail_oauth2 --generate_oauth2_token "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --client_id"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"<client_id>"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --client_secret"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"<client_secret>"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --scope"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"https://www.googleapis.com/auth/gmail.send"')]),e._v("\n")])])]),t("ol",{attrs:{start:"5"}},[t("li",[e._v("Add the created credentials and tokens to the environment variable as shown below:")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DJANGO_EMAIL_BACKEND")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'gmailapi_backend.mail.GmailBackend'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DJANGO_GMAIL_API_CLIENT_ID")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'google_assigned_id'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DJANGO_GMAIL_API_CLIENT_SECRET")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'google_assigned_secret'")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DJANGO_GMAIL_API_REFRESH_TOKEN")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'google_assigned_token'")]),e._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);